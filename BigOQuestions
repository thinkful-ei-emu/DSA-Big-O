1) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog, preferably of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You stand up and yell out, who here has a golden retriever and would like to be a playdate for my golden. Someone yells - "I do, be happy to bring him over"

I'm assuming the variable that scales here is the number of people (Other possibilities: maybe you have multiple dogs/work for a dog adoption center so the number of dogs do noticeably scale). First, You shout once.  Second, everyone does the audio processing on their own time.  Third, someone responds. O(1), assuming that you have an efficient way of scaling shouting to when the number of people increase to thousands/millions/billions, AND audio processing for each person doesn't somehow increase depending on the number of people, AND the amount of time for someone to respond doesn't increase due to bystander effect/effect of the tech you're using to communicate. Maybe with a large enough group of people, might need to shout multiple times, walking around the state of Rhode Island, if there are 6 billion people involved for example. Then it seems closer to O(N) (assuming you know how to walk the state efficiently). Could use technology, so then depends on runtime complexity of the tech!


2) Determine the Big O for the following algorithm: You are sitting in a room with 15 people. You want to find a playmate for your dog who is of the same breed. So you want to know if anyone out of the 15 people have the same breed as your dog. You start with the first person and ask him if he has a golden retriever. He says no, then you ask the next person, and the next, and the next until you find someone who has a golden or there is no one else to ask.

also once again assuming that the only variable that scales here is the number of people, and assuming you know how to walk efficiently to each person, O(N), where N is the number of people. O(d * N) if you have more than one dog, the golden, where d is the number of dogs.




Even or Odd
function isEven(value) {
    if (value % 2 == 0) {
        return true;
    }
    else
        return false;
    }
}

In this scenario I am assuming the only thing that can change/grow is value, and I'm going to assume this value can get bigger than 64-bit (some kind of data type that allows for unlimitedly big int). It should still be O(1), unless the language we are using maybe doesn't optimize modulo 2. Because you only ever need to check one bit of the number to figure out even or odd (the rightmost "digit") (also if we were using a special data type, would have to assume there is some constant time way to access the very last digit). Even if we weren't using a binary system, and had n-ary system, as long as n was fixed, modulo 2 should be only be dependent on size of n, so would be constant. Otherwise it's the runtime complexity of whatever algorithm the machine is using the modulo 2.




Are you here?
function areYouHere(arr1, arr2) {
    for (let i = 0; i < arr1.length; i++) {
        const el1 = arr1[i];
        for (let j = 0; j < arr2.length; j++) {
            const el2 = arr2[j];
            if (el1 === el2) return true;
        }
    }
    return false;
}

The variables that can grow here is arr1 and arr2, where N is the size of arr1, and M is the size of arr2. This code takes each element of arr1, then compares it with every element in arr2, if it finds a match, it returns true, otherwise it keeps going. This is O(N*M), in the worst-case (which is that arr2 and arr1 doesn't share any element which satisfies ===). Even if they do share an element, I feel like on "average" (in most senses of this word) it will still be O(NM). One additional thing, this is very minor usually, but the === could be a thing to consider if this was a different language, and the elements of arr are things that take some actual amount of time to check using a deep equal.




Doubler
function doubleArrayValues(array) {
    for (let i = 0; i < array.length; i++) {
        array[i] *= 2;
    }
    return array;
}

O(N) where N is the size of the array, if we assume array elements' number values to have fixed max and min size (32 or 64 bit for example). Otherwise depends on language's multiplication algorithm, and the "average" bit-size of the number values.




Naive Search
function naiveSearch(array, item) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
}

O(N), In worst case we have to iterate through the entire array. i++ n times, access array[i] n times, check array[i]===item n times.

same thing about === could apply (like in Are you here?) if using something different than === to check equality, and item and array elements were data types whose equality cannot be checked in constant time for the machine.



Creating pairs:
function createPairs(arr) {
    for (let i = 0; i < arr.length; i++) {
        for(let j = i + 1; j < arr.length; j++) {
            console.log(arr[i] + ", " +  arr[j] );
        }
    }
}

let N be arr.length
For each number, i, between 0 and N-1 (inclusive), we take a number j between i+1 and N-1 (inclusive), and go access arr[i] and arr[j]. We are also doing i++, j++, to change the i and j values, and comparisions like j<arr.length.

So for i=0, we are doing j++, accessing values in arr, N-1 times.
i=1, doing stuff N-2 times,
i=2, stuff N-3 times,
...
i=N-2 stuff 1 times,
i=N-1 variable assignment and checking < .
So thats 1+2+3+...+N-1 which is N(N-1)/2.
So it's O(N^2), assuming addition to be bound by a constant (BigInt could change this, but would need to do j+=BigInt(1))



Compute the sequence
function compute(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {

        if (i === 1) {
            result.push(0);
        }
        else if (i == 2) {
            result.push(1);
        }
        else {
            result.push(result[i - 2] + result[i - 3]);
        }
    }
    return result;
}

It's fibonacci, where you start with 0,1, and the recursive formula is f_n=f_(n-1) + f_(n-2). I know that it uses result[i-2], result[i-3], but that's because i is ahead by 1. (it starts at 1)




An efficient search
function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}

This is binary search. The way to prove this is O(log(n)), where n is the size of the array, is maybe as follows.

This whileloop ends when minIndex>maxIndex. Note that this happens right after the loop we get minIndex=maxIndex, then the currentIndex=minIndex=maxIndex, and then one of 3 things happen. 
1) If currentElement===item, this is over, we return currentIndex, so the loop ends even before we reach minIndex>maxIndex.
2) If currentElement< item, then minIndex=currentindex+1,
while maxIndex=currentIndex is untouched. hence minIndex is greater than maxIndex by 1
3) If currentElement> item, then maxIndex gets shrunk while minIndex is untouched, once again, minIndex>maxIndex

Now what I claim without proof is that maxIndex-minIndex+1 gets halved (or even smaller) every iteration of the loop. Since I haven't come up with a clever way of proving this, and can only think of even and odd casework, I encourage the reader to do the same. 

And as I showed above, the loop basically is constant time from ending once we hit the point that maxIndex-minIndex+1 = 1.

Note that maxIndex-minIndex+1 at the start is equal to n, where n is the length of the arr. So the question is, in how many iterations can we get maxIndex-minIndex+1 from n to 1. Let us say i is the number of iterations.
So after i iterations:
maxIndex-minIndex+1 = n (1/2) (1/2) ... (1/2) i times,
maxIndex-minIndex+1 = n/ (2^i).
And we are done once maxIndex-minIndex+1 <=1, so we are done after i iterations, IF 
n/(2^i)=maxIndex-minIndex+1 <=1
Moving things around, we're done if
n<=2^i
Since log is an increasing function,
log_2(n)<=log_2(2^i)
And we get that, we are done if log_2(n)<=i, so if i=Math.ceil(log_2(n)) we are constant time from finishing. And I am going to assume that each iteration's runtime can be bound by a constant independent on size of array (no funky data types/comparisons).

Hence it's O(log(n)).



Random element
function findRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
assuming we aren't using any special data types, O(1). (like multiplication is bound by constant)





What Am I?
function isWhat(n) {
    if (n < 2 || n % 1 != 0) {
        return false;
    }
    for (let i = 2; i < n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}
if you're less than 2 or you have decimals, return false 
we go through a vairable i from 2 to n-1 and see if n is divisible by i, if so return false. This is checking for prime.

This is like O(N*f(N)) where f(N) is "average worst-case" computational complexity of doing n%i. f(N) is probably something like log(N)g(N), where g(N) is like really small (since log(N) is approximately the number of bits involved?) No idea how cutting edge n%i can get.



Tower Of Hanoi
You can make a recursive formula for the number of moves that you need to make. 

But first, how my Hanoi works: 
I have the current Rod from which to move n rings off of onto a target Rod. So imagine from the beginning:
.
..
...     empty    empty
current          target
n=3
So, using recursion, I assume my algorithm works if I send it something like Hanoi(n=2,current,target), then after that call, my end result ought to be


                      .
...       empty       ..
current   unoccupied  target

But I want to move my ... ring into the target area first, so that i can move everything on top of it. Hence, the idea is, I instead do something like, Hanoi(n=2,current,target=unoccupied).

So now instead, I get 

          .            
...       ..          empty
current   unoccupied  target

Then I move the base ... into the target.

          .            
empty     ..          ...
current   unoccupied  target

Now I can Hanoi(n=2,current=unoccupied,target), and it should move the two rings at the top of the unoccupied Rod and take it to the target. (The beauty of recursion is when thinking about it, you can assume your algorithm works before it is finished).
                      .
                      ..
empty                 ...
current   unoccupied  target

To make sure my algorithm really works, there are a couple things left to prove, that no illegal moves happen, because what if actually we started at Hanoi(n=4,current,target) etc etc. But it is usually easy to see and beyond the scope of this question (mathematician way of saying I'm lazy IDK how to show it quickly).

Anyways now that we know how it works, we can easily see that when doing Hanoi(3,current,target), we did 3 things,

Hanoi(n=2,current,target=unoccupied)
Move base
Hanoi(n=2,current=unoccupied,target)

So let T_n be the number of moves it takes to solve Tower of Hanoi with n rings. Then from what I said previously,
Then T_n= T_(n-1)      <--Hanoi(n-1,current,target=unoccupied)
          + 1          <--Move base
          + T_(n-1)    <--Hanoi(n-1,current=unoccupied,target)
Or simply,
T_n=2*T_(n-1) +1
and we know T_1, takes 1 move (technically more for the computer but it is just a constant factor in the end)
It takes some more math to solve this, but quickly, we can check that the formula T_n=2^(n)-1, satisfies this recurrence.

So it make runtime of this algorithm should be at least O(2^n), where n is the number of rings.




finding way out of maze.
Each recursive calls 3 versions of itself. Each level,k, should have something like 3^k nodes. And we know 4^0+4^1+...+4^k = [4^(k+1)-1]/(4-1) = O(4^k)

So it's definitely at least something like O(4^(f(N,M))), where N,M are the number of rows and cols respectively.

finding all ways out of maze
^ same as above, but doesn't even have the lucky quick solution.


anagram/perms, so it is at least 
O(n!/(k_1!k_2!k_3!...k_l!)), where n is the number of distinct letters, and k1,k2,...,k_l are the counts of each repeated letter, since that's exactly how many results there should be. My recursion does perform at O(n^2*n!/(k_1!k_2!k_3!...k_l!)), because I have n!/(k_1!k_2!k_3!...k_l!) end leaves and they all end at the same height (height of the string). So the amount of nodes I traverse is bound by (height of tree)*(width of my largest level which is my leaves level) so I get n * n!/(k_1!k_2!k_3!...k_l!), is the most number of times